import type { Object3D } from 'three';
import type { WorkerCollideEvent, WorkerRayhitEvent } from './Provider';
import type { AtomicProps, BodyProps, BodyShapeType } from './hooks';
import type React from 'react';
export declare type Buffers = {
    positions: Float32Array;
    quaternions: Float32Array;
};
export declare type Refs = {
    [uuid: string]: Object3D;
};
declare type WorkerContact = WorkerCollideEvent['data']['contact'];
export declare type CollideEvent = Omit<WorkerCollideEvent['data'], 'body' | 'target' | 'contact'> & {
    body: Object3D;
    target: Object3D;
    contact: Omit<WorkerContact, 'bi' | 'bj'> & {
        bi: Object3D;
        bj: Object3D;
    };
};
export declare type CollideBeginEvent = {
    op: 'event';
    type: 'collideBegin';
    target: Object3D;
    body: Object3D;
};
export declare type CollideEndEvent = {
    op: 'event';
    type: 'collideEnd';
    target: Object3D;
    body: Object3D;
};
export declare type RayhitEvent = Omit<WorkerRayhitEvent['data'], 'body'> & {
    body: Object3D | null;
};
export declare type Event = RayhitEvent | CollideEvent | CollideBeginEvent | CollideEndEvent;
export declare type Events = {
    [uuid: string]: (e: Event) => void;
};
export declare type Subscriptions = {
    [id: string]: (value: AtomicProps[keyof AtomicProps] | number[]) => void;
};
export declare type ProviderContext = {
    worker: Worker;
    bodies: React.MutableRefObject<{
        [uuid: string]: number;
    }>;
    buffers: Buffers;
    refs: Refs;
    events: Events;
    subscriptions: Subscriptions;
};
export declare type DebugApi = {
    add(id: string, props: BodyProps, type: BodyShapeType): void;
    remove(id: string): void;
};
export declare const context: React.Context<ProviderContext>;
export declare const debugContext: React.Context<DebugApi>;
export {};
