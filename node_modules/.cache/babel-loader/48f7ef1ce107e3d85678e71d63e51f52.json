{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17192\\\\reactProjects\\\\finalPort\\\\src\\\\components\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useMemo, useEffect } from \"react\";\nimport { useLoader, useThree, useFrame } from \"@react-three/fiber\";\nimport { SMAAImageLoader, BlendFunction, EffectComposer, EffectPass, RenderPass, SMAAEffect, SSAOEffect, NormalPass } from \"postprocessing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  const {\n    gl,\n    scene,\n    camera,\n    size\n  } = useThree();\n  const smaa = useLoader(SMAAImageLoader);\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl);\n    composer.addPass(new RenderPass(scene, camera));\n    const smaaEffect = new SMAAEffect(...smaa);\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\n    const normalPass = new NormalPass(scene, camera);\n    const ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n      blendFunction: BlendFunction.MULTIPLY,\n      samples: 31,\n      // May get away with less samples\n      rings: 4,\n      // Just make sure this isn't a multiple of samples\n      distanceThreshold: 0.4,\n      distanceFalloff: 0.5,\n      rangeThreshold: 0.5,\n      // Controls sensitivity based on camera view distance **\n      rangeFalloff: 0.01,\n      luminanceInfluence: 0.5,\n      radius: 50,\n      // Spread range\n      intensity: 10,\n      bias: 0.5\n    }); // SSAO is supposed to be a subtle effect!\n\n    ssaoEffect.blendMode.opacity.value = 1.0; // Debug.\n\n    const effectPass = new EffectPass(camera, smaaEffect, ssaoEffect);\n    effectPass.renderToScreen = true; //normalPass.renderToScreen = true // Check if normals look ok.\n\n    composer.addPass(normalPass);\n    composer.addPass(effectPass);\n    return composer;\n  }, []);\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\n  return useFrame((_, delta) => composer.render(delta), 1);\n}\n\n_s(Post, \"y5Crm+EHkfQ7FPW4nMOn4oAriEo=\", false, function () {\n  return [useThree, useLoader, useFrame];\n});\n\n_c = Post;\nexport default function Effect() {\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: /*#__PURE__*/_jsxDEV(Post, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Effect;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Effect\");","map":{"version":3,"sources":["C:/Users/17192/reactProjects/finalPort/src/components/Post.js"],"names":["React","Suspense","useMemo","useEffect","useLoader","useThree","useFrame","SMAAImageLoader","BlendFunction","EffectComposer","EffectPass","RenderPass","SMAAEffect","SSAOEffect","NormalPass","Post","gl","scene","camera","size","smaa","composer","addPass","smaaEffect","colorEdgesMaterial","setEdgeDetectionThreshold","normalPass","ssaoEffect","renderTarget","texture","blendFunction","MULTIPLY","samples","rings","distanceThreshold","distanceFalloff","rangeThreshold","rangeFalloff","luminanceInfluence","radius","intensity","bias","blendMode","opacity","value","effectPass","renderToScreen","setSize","width","height","_","delta","render","Effect"],"mappings":"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","sourcesContent":["import React, { Suspense, useMemo, useEffect } from \"react\"\nimport { useLoader, useThree, useFrame } from \"@react-three/fiber\"\nimport {\n  SMAAImageLoader,\n  BlendFunction,\n  EffectComposer,\n  EffectPass,\n  RenderPass,\n  SMAAEffect,\n  SSAOEffect,\n  NormalPass,\n} from \"postprocessing\"\n\nfunction Post() {\n  const { gl, scene, camera, size } = useThree()\n  const smaa = useLoader(SMAAImageLoader)\n  const composer = useMemo(() => {\n    const composer = new EffectComposer(gl)\n    composer.addPass(new RenderPass(scene, camera))\n    const smaaEffect = new SMAAEffect(...smaa)\n    smaaEffect.colorEdgesMaterial.setEdgeDetectionThreshold(0.1)\n\n    const normalPass = new NormalPass(scene, camera)\n    const ssaoEffect = new SSAOEffect(camera, normalPass.renderTarget.texture, {\n      blendFunction: BlendFunction.MULTIPLY,\n      samples: 31, // May get away with less samples\n      rings: 4, // Just make sure this isn't a multiple of samples\n      distanceThreshold: 0.4,\n      distanceFalloff: 0.5,\n      rangeThreshold: 0.5, // Controls sensitivity based on camera view distance **\n      rangeFalloff: 0.01,\n      luminanceInfluence: 0.5,\n      radius: 50, // Spread range\n      intensity: 10,\n      bias: 0.5,\n    })\n\n    // SSAO is supposed to be a subtle effect!\n    ssaoEffect.blendMode.opacity.value = 1.0 // Debug.\n\n    const effectPass = new EffectPass(\n      camera,\n      smaaEffect,\n      ssaoEffect,\n      //new DepthEffect(), // Check if depth looks ok.\n    )\n    effectPass.renderToScreen = true\n    //normalPass.renderToScreen = true // Check if normals look ok.\n    composer.addPass(normalPass)\n    composer.addPass(effectPass)\n    return composer\n  }, [])\n\n  useEffect(() => void composer.setSize(size.width, size.height), [size])\n  return useFrame((_, delta) => composer.render(delta), 1)\n}\n\nexport default function Effect() {\n  return (\n    <Suspense fallback={null}>\n      <Post />\n    </Suspense>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}